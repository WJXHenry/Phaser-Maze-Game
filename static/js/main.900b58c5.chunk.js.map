{"version":3,"sources":["Phaser/Common/colours.js","Phaser/Scenes/Movement.js","Phaser/Game/gameSettings.js","Phaser/Game/gestures.js","Phaser/Scenes/MainMenu.js","Phaser/Scenes/Settings.js","Phaser/Utils/graph.js","Phaser/Game/gameMaze.js","Phaser/Utils/maze.js","Phaser/Game/character.js","Phaser/Scenes/StartGame.js","Phaser/Scenes/EndScreen.js","Phaser/Game.js","App.js","serviceWorker.js","index.js","Phaser/Common/shuffle.js"],"names":["module","exports","BLACK","BLACK_0x","GOLD","GOLD_0x","GRAY","GRAY_0x","WHITE","WHITE_0x","Movement","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sprite","direction","y","x","load","setBaseURL","image","_this","cameras","main","setBackgroundColor","counter","keys","input","keyboard","addKeys","up","down","left","right","addKey","on","scene","start","player","add","console","log","isDown","updateMovement","Phaser","Scene","getDimensions","game","screenLength","config","width","screenSpaceUnit","screenCenter","textSize1","textSize2","textSize3","textSize4","GESTURES","SWIPE_RIGHT","SWIPE_LEFT","SWIPE_UP","SWIPE_DOWN","SINGLE_TAP","DOUBLE_TAP","TP_SWIPE_RIGHT","NONE_DETECTED","gestureDetection","inputManager","callback","options","arguments","length","undefined","pointer","swipeThreshold","deltaTime","upTime","downTime","velX","upX","downX","velY","upY","downY","speedX","Math","abs","speedY","detectGesture","MainMenu","data","settings","objectSpread","maxGridSize","minGridSize","gridSize","maxSideLength","minSideLength","sideLength","gameMode","handleGesture","bind","arrowUp","arrowDown","select","gameDimensions","choice","doubleTapTimer","doubleTapCooldown","text","fontFamily","fill","fontSize","setOrigin","startGame","gesture","updateChoice","Date","getTime","Input","Keyboard","JustDown","newChoice","setFill","Settings","arrowLeft","arrowRight","gameModes","concat","menuReturn","updateSelection","updateGridSize","updateGameMode","newGridSize","setText","newSideLength","newGameMode","Graph","vertices","Set","edges","alist","forEach","v","addVertex","e","addEdge","_this2","key","vertex","Number","isInteger","push","isVertex","Error","has","Array","from","g","walk","i","isEdge","path","size","isWalk","GameMaze","graphics","colour","setPosition","fillStyle","maze","getVertices","pos","split","vertX","vertY","rectX","rectY","lengthX","lengthY","fillRect","position","Maze","_createGrid","_createMaze","floor","grid","j","completed","paths","shuffle","coords","map","parseInt","DIRECTIONS","UP","DOWN","LEFT","RIGHT","DEFAULT_UPDATE_STEPS","Character","prevPos","smoothMovement","UPDATE_STEPS","updateSteps","updating","updateStep","fillGrid","newPos","_smoothMovement","diffX","round","diffY","interFrom","interTo","StartGame","directions","actionClock","actionCooldown","exit","character","endPoint","drawMaze","drawCharacter","timer","moveCharacter","results","time","update","EndScreen","SOLO","TWO_PLAYER","RACE","CHASE","ESCAPE","continue","drawScreen","Game","dimension","_getDimensions","type","AUTO","parent","pixelArt","height","physics","default","arcade","gravity","window","innerWidth","innerHeight","react_default","a","createElement","id","React","Component","App","className","Game_Game","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","array","temporaryValue","randomIndex","currentIndex","random"],"mappings":"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","file":"static/js/main.900b58c5.chunk.js","sourcesContent":["const BLACK = '#000000';\nconst GOLD = '#f9a602';\nconst WHITE = '#ffffff';\nconst GRAY = '#cccccc';\n\n// '0x' notation - hexadecimal\nconst BLACK_0x = '0x000000';\nconst GOLD_0x = '0xf9a602';\nconst WHITE_0x = '0xffffff';\nconst GRAY_0x = '0xcccccc';\n\nmodule.exports = {\n  BLACK,\n  BLACK_0x,\n  GOLD,\n  GOLD_0x,\n  GRAY,\n  GRAY_0x,\n  WHITE,\n  WHITE_0x\n};\n","import Phaser from 'phaser';\n\nexport default class Movement extends Phaser.Scene {\n  constructor() {\n    super('Movement');\n  }\n\n  updateMovement(sprite, direction) {\n    if (direction === 'up') {\n      sprite.y -= 2;\n      if (sprite.y < 0) {\n        sprite.y = 0;\n      }\n    } else if (direction === 'down') {\n      sprite.y += 2;\n      if (sprite.y > 600) {\n        sprite.y = 600;\n      }\n    } else if (direction === 'left') {\n      sprite.x -= 2;\n      if (sprite.x < 0) {\n        sprite.x = 0;\n      }\n    } else if (direction === 'right') {\n      sprite.x += 2;\n      if (sprite.x > 800) {\n        sprite.x = 800;\n      }\n    }\n  }\n\n  // redrawRect(prevPos, newPos, drawGraphics, redrawGraphics) {\n  //   let prevRect = new Phaser.Geom.Rectangle(prevPos.x, prevPos.y, 20, 20);\n  //   let newRect = new Phaser.Geom.Rectangle(newPos.x, newPos.y, 20, 20);\n  //   redrawGraphics.fillRectShape(prevRect);\n  //   drawGraphics.fillRectShape(newRect);\n  // }\n\n  preload() {\n    this.load.setBaseURL(\n      'https://raw.githubusercontent.com/wjxhenry/website/master'\n    );\n    // Load assets\n    this.load.image('player', 'assets/test/red.png');\n  }\n\n  create() {\n    // this.cameras.main.setBackgroundColor('rgba(125,0,255,1)'); // Set rgb background colour\n    // this.cameras.main.setBackgroundColor('#800080');\n    // this.cameras.main.setBackgroundColor('#ffffff');\n    this.cameras.main.setBackgroundColor('#000000');\n    this.counter = 0;\n    this.keys = this.input.keyboard.addKeys({\n      up: 'W',\n      down: 'S',\n      left: 'A',\n      right: 'D'\n    });\n    // this.playerPos = { x: 0, y: 0 };\n    var keyObj = this.input.keyboard.addKey('ESC');\n    keyObj.on('down', () => {\n      this.scene.start('MainMenu');\n      //   Fix the issue where there are multiple logs??\n    });\n    this.player = this.add.sprite(0, 0, 'player');\n    console.log('Start Movement');\n    // keyObj.on('up', event => {\n    //   console.log('W key up');\n    // });\n  }\n\n  update() {\n    this.counter++;\n    if (this.counter % 1 === 0) {\n      // Clock updates every 60 (milli?)seconds\n      // console.log(\"Tick\")\n      this.counter = 0; // Reset counter (just in case of overflow?)\n      if (this.keys.up.isDown) {\n        console.log('Up');\n        this.updateMovement(this.player, 'up');\n      }\n      if (this.keys.down.isDown) {\n        console.log('Down');\n        this.updateMovement(this.player, 'down');\n      }\n      if (this.keys.left.isDown) {\n        console.log('Left');\n        this.updateMovement(this.player, 'left');\n      }\n      if (this.keys.right.isDown) {\n        console.log('Right');\n        this.updateMovement(this.player, 'right');\n      }\n      // console.log(this.playerPos);\n    }\n    // console.log(\"TestScene: update\")\n  }\n}\n","/**\n * @typedef {Object} GameSettings\n * @property {Number} maxGridSize\n * @property {Number} minGridSize\n * @property {Number} gridSize\n * @property {Number} maxSideLength\n * @property {Number} minSideLength\n * @property {Number} sideLength\n * @property {Number} gameMode\n */\n\n/**\n * Returns custom dimensions for the game instance\n * @param {Phaser.Game} game - The Phaser Game object\n * @returns {Object} - The custom dimensions object\n */\nexport function getDimensions(game) {\n  const screenLength = game.config.width;\n  return {\n    screenLength,\n    screenSpaceUnit: screenLength / 20,\n    screenCenter: screenLength / 2,\n    textSize1: screenLength / 10,\n    textSize2: screenLength / 15,\n    textSize3: screenLength / 18,\n    textSize4: screenLength / 22\n  };\n}\n\n/**\n * The initial settings for the game (game configs)\n * @returns {GameSettings} - The initial/default settings for the game configurations\n */\nexport function initSettings() {\n  return {\n    maxGridSize: 35,\n    minGridSize: 10,\n    gridSize: 20,\n    maxSideLength: 15,\n    minSideLength: 10,\n    sideLength: 10,\n    gameMode: 0\n  };\n}\n","/**\n * @typedef {Object} Gesture\n * @property {Number} SWIPE_RIGHT\n * @property {Number} SWIPE_LEFT\n * @property {Number} SWIPE_UP\n * @property {Number} SWIPE_DOWN\n * @property {Number} SINGLE_TAP\n * @property {Number} NONE_DETECTED\n */\nexport const GESTURES = {\n  SWIPE_RIGHT: 0,\n  SWIPE_LEFT: 1,\n  SWIPE_UP: 2,\n  SWIPE_DOWN: 3,\n  SINGLE_TAP: 4,\n  DOUBLE_TAP: 5, // Not sure if this can be implemented here (maybe separately)\n  TP_SWIPE_RIGHT: 6, // TP = Two Pointer... (WIP)\n  NONE_DETECTED: 7\n};\n\n/**\n * Register input manager for gesture detection\n * @param {Phaser.Input.InputPlugin} inputManager - The input manager that handles all input related events\n * @callback callback - The callback function that handles the detected gesture\n *  @param {Gesture} gesture - The detected gesture\n * @param {Object} options\n * @param {Number} options.swipeThreshold - The swipe threshold for the detection\n */\nexport function gestureDetection(inputManager, callback, options = {}) {\n  inputManager.on('pointerup', pointer => {\n    callback(detectGesture(pointer, options));\n  });\n}\n\nfunction detectGesture(pointer, options) {\n  let swipeThreshold = options.swipeThreshold || 100;\n  let deltaTime = (pointer.upTime - pointer.downTime) / 1000;\n  let velX = (pointer.upX - pointer.downX) / deltaTime;\n  let velY = (pointer.upY - pointer.downY) / deltaTime;\n  let speedX = Math.abs(velX);\n  let speedY = Math.abs(velY);\n  if (speedX > speedY && speedX > swipeThreshold) {\n    if (velX < 0) {\n      return GESTURES.SWIPE_LEFT;\n    } else {\n      return GESTURES.SWIPE_RIGHT;\n    }\n  } else if (speedY > speedX && speedY > swipeThreshold) {\n    if (velY < 0) {\n      return GESTURES.SWIPE_UP;\n    } else {\n      return GESTURES.SWIPE_DOWN;\n    }\n  }\n  return GESTURES.SINGLE_TAP;\n}\n\n// Swipe gestures without using time (speed/velocity)\n// eslint-disable-next-line\nfunction detectGestureNoTime(pointer, options) {\n  let swipeThreshold = options.swipeThreshold || 50;\n  let displacementX = pointer.upX - pointer.downX;\n  let displacementY = pointer.upY - pointer.downY;\n  let distanceX = Math.abs(displacementX);\n  let distanceY = Math.abs(displacementY);\n  if (distanceX > distanceY && distanceX > swipeThreshold) {\n    if (displacementX < 0) {\n      return GESTURES.SWIPE_LEFT;\n    } else {\n      return GESTURES.SWIPE_RIGHT;\n    }\n  } else if (distanceY > distanceX && distanceY > swipeThreshold) {\n    if (displacementY < 0) {\n      return GESTURES.SWIPE_UP;\n    } else {\n      return GESTURES.SWIPE_DOWN;\n    }\n  }\n  return GESTURES.SINGLE_TAP;\n}\n","import Phaser from 'phaser';\nimport { initSettings, getDimensions } from '../Game/gameSettings';\nimport { BLACK, GOLD, GRAY, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class MainMenu extends Phaser.Scene {\n  constructor() {\n    super('MainMenu');\n  }\n\n  init(data) {\n    this.settings = { ...initSettings(), ...data };\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  preload() {\n    this.load.setBaseURL(\n      'https://raw.githubusercontent.com/wjxhenry/website/master'\n    );\n    // Load assets...\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      up: 'W',\n      arrowUp: 'up',\n      down: 'S',\n      arrowDown: 'down',\n      select: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.choice = 0;\n\n    this.doubleTapTimer = 0;\n    this.doubleTapCooldown = 200; // 200 milliseconds between each tap\n\n    let title = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Yet Another Maze',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize2\n      }\n    );\n    title.setOrigin(0.5, 0.5);\n    let startGame = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 8,\n      'Start Game',\n      {\n        fontFamily: 'Ubuntu',\n        fill: GOLD,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    startGame.setOrigin(0.5, 0.5);\n    let settings = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 12,\n      'Settings',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    settings.setOrigin(0.5, 0.5);\n    let exit = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 16,\n      'Exit',\n      {\n        fontFamily: 'Ubuntu',\n        fill: GRAY,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    exit.setOrigin(0.5, 0.5);\n\n    this.options = [\n      { text: startGame, scene: 'StartGame' },\n      { text: settings, scene: 'Settings' }\n      // { text: exit, scene: 'Movement' }\n    ];\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SWIPE_UP) {\n      this.updateChoice(-1);\n    } else if (gesture === GESTURES.SWIPE_DOWN) {\n      this.updateChoice(1);\n    } else if (gesture === GESTURES.SINGLE_TAP) {\n      if (new Date().getTime() - this.doubleTapTimer < this.doubleTapCooldown) {\n        this.scene.start(this.options[this.choice].scene, this.settings);\n      }\n      this.doubleTapTimer = new Date().getTime();\n    }\n  }\n\n  update() {\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.up) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowUp)\n    ) {\n      this.updateChoice(-1);\n    }\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.down) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowDown)\n    ) {\n      this.updateChoice(1);\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.keys.select)) {\n      this.scene.start(this.options[this.choice].scene, this.settings);\n    }\n  }\n\n  updateChoice(direction) {\n    let newChoice = this.choice + direction;\n    if (newChoice > -1 && newChoice < this.options.length) {\n      this.options[this.choice].text.setFill(BLACK);\n      this.options[newChoice].text.setFill(GOLD);\n      this.choice = newChoice;\n    }\n  }\n}\n","import Phaser from 'phaser';\nimport { getDimensions } from '../Game/gameSettings';\nimport { BLACK, GOLD, GRAY, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class Settings extends Phaser.Scene {\n  constructor() {\n    super('Settings');\n  }\n\n  init(data) {\n    this.settings = data;\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  preload() {\n    this.load.setBaseURL(\n      'https://raw.githubusercontent.com/wjxhenry/website/master'\n    );\n    // Load assets...\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      up: 'W',\n      arrowUp: 'up',\n      down: 'S',\n      arrowDown: 'down',\n      left: 'A',\n      arrowLeft: 'left',\n      right: 'D',\n      arrowRight: 'right',\n      select: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.gameModes = ['Solo', 'Two Player', 'Race', 'Chase', 'Escape'];\n\n    this.choice = 0;\n\n    this.doubleTapTimer = 0;\n    this.doubleTapCooldown = 200; // 200 milliseconds between each tap\n\n    let title = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Settings',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize1\n      }\n    );\n    title.setOrigin(0.5, 0.5);\n    let gridSize = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 8,\n      `Grid size: ${this.settings.gridSize}`,\n      {\n        fontFamily: 'Ubuntu',\n        fill: GOLD,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    gridSize.setOrigin(0.5, 0.5);\n    let sideLength = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 11,\n      `Side length: ${this.settings.sideLength}`,\n      {\n        fontFamily: 'Ubuntu',\n        fill: GRAY,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    sideLength.setOrigin(0.5, 0.5);\n    let gameMode = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 14,\n      this.gameModes[this.settings.gameMode],\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    gameMode.setOrigin(0.5, 0.5);\n    let menuReturn = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 17,\n      'Return',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    menuReturn.setOrigin(0.5, 0.5);\n\n    this.options = [gridSize, gameMode, menuReturn];\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SWIPE_UP) {\n      this.updateChoice(-1);\n    } else if (gesture === GESTURES.SWIPE_DOWN) {\n      this.updateChoice(1);\n    } else if (gesture === GESTURES.SWIPE_RIGHT) {\n      this.updateSelection(1);\n    } else if (gesture === GESTURES.SWIPE_LEFT) {\n      this.updateSelection(-1);\n    } else if (gesture === GESTURES.SINGLE_TAP) {\n      if (new Date().getTime() - this.doubleTapTimer < this.doubleTapCooldown) {\n        if (this.choice === 2) {\n          this.scene.start('MainMenu', this.settings);\n        }\n      }\n      this.doubleTapTimer = new Date().getTime();\n    }\n  }\n\n  update() {\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.up) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowUp)\n    ) {\n      this.updateChoice(-1);\n    }\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.down) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowDown)\n    ) {\n      this.updateChoice(1);\n    }\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.right) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowRight)\n    ) {\n      this.updateSelection(1);\n    }\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.left) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowLeft)\n    ) {\n      this.updateSelection(-1);\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.keys.select)) {\n      if (this.choice === 2) {\n        this.scene.start('MainMenu', this.settings);\n      }\n    }\n  }\n\n  updateChoice(direction) {\n    let newChoice = this.choice + direction;\n    if (newChoice > -1 && newChoice < this.options.length) {\n      this.options[this.choice].setFill(BLACK);\n      this.options[newChoice].setFill(GOLD);\n      this.choice = newChoice;\n    }\n  }\n\n  updateSelection(direction) {\n    if (this.choice === 0) {\n      this.updateGridSize(direction);\n    } else if (this.choice === 1) {\n      this.updateGameMode(direction);\n    }\n    // else if (this.choice === 1) {\n    //   this.updateSideLength(direction);\n    // }\n  }\n\n  updateGridSize(direction) {\n    let newGridSize = this.settings.gridSize + direction;\n    if (\n      newGridSize > this.settings.minGridSize - 1 &&\n      newGridSize < this.settings.maxGridSize + 1\n    ) {\n      this.options[0].setText(`Grid size: ${newGridSize}`);\n      this.settings.gridSize = newGridSize;\n    }\n  }\n\n  updateSideLength(direction) {\n    let newSideLength = this.settings.sideLength + direction;\n    if (\n      newSideLength > this.settings.minSideLength - 1 &&\n      newSideLength < this.settings.maxSideLength + 1\n    ) {\n      this.options[1].setText(`Side length: ${newSideLength}`);\n      this.settings.sideLength = newSideLength;\n    }\n  }\n\n  updateGameMode(direction) {\n    let newGameMode = this.settings.gameMode + direction;\n    if (newGameMode > -1 && newGameMode < this.gameModes.length) {\n      this.options[1].setText(this.gameModes[newGameMode]);\n      this.settings.gameMode = newGameMode;\n    }\n  }\n}\n","/**\n * Directed Graph Class\n *\n * This graph class is a container that holds a set\n * of vertices and a list of directed edges.\n * Edges are modelled as tuples (u,v) of vertices.\n *\n * Uses an adjacency list representation. Loops\n * and parallel copies of edges can be stored.\n */\n\nexport default class Graph {\n  constructor(vertices = new Set(), edges = []) {\n    this.alist = {};\n\n    vertices.forEach(v => {\n      this.addVertex(v);\n    });\n    edges.forEach(e => {\n      this.addEdge(e);\n    });\n  }\n\n  getVertices() {\n    return new Set(Object.keys(this.alist));\n  }\n\n  getEdges() {\n    let edges = [];\n    Object.keys(this.alist).forEach(key => {\n      this.alist[key].forEach(vertex => {\n        if (Number.isInteger(vertex)) {\n          edges.push([Number(key), vertex]);\n        } else {\n          edges.push([key, vertex]);\n        }\n      });\n    });\n    return edges;\n  }\n\n  addVertex(v) {\n    if (!(v in this.alist)) {\n      this.alist[v] = new Set();\n    }\n  }\n\n  addEdge(e) {\n    if (!this.isVertex(e[0]) || !this.isVertex(e[1])) {\n      throw new Error('An endpoint is not in graph');\n    }\n    this.alist[e[0]].add(e[1]);\n  }\n\n  isVertex(v) {\n    return v in this.alist;\n  }\n\n  isEdge(e) {\n    if (!(e[0] in this.alist)) {\n      return false;\n    }\n    return this.alist[e[0]].has(e[1]);\n  }\n\n  neighbours(v) {\n    if (!this.isVertex(v)) {\n      throw new Error('Vertex not in graph');\n    }\n    return Array.from(this.alist[v]);\n  }\n\n  static isWalk(g, walk) {\n    if (walk.length === 0)\n      // Should have at least one vertex\n      return false;\n\n    if (walk.length === 1) return g.isVertex(walk[0]);\n\n    for (let i = 0; i < walk.length - 1; i++) {\n      if (!g.isEdge([walk[i], walk[i + 1]])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static isPath(g, path) {\n    if (new Set(path).size < path.length) return false;\n\n    return this.isWalk(g, path);\n  }\n}\n","import Maze from '../Utils/maze';\nimport { getDimensions } from './gameSettings';\nimport { WHITE_0x } from '../Common/colours';\n\nexport default class GameMaze extends Maze {\n  /**\n   * Constructor\n   * @param {Phaser.Game} game - The Phaser game object\n   * @param {Phaser.GameObjects.Graphics} graphics - The Phaser graphics object\n   * @param {Number} size - The size of the maze (size x size grid)\n   * @param {Number} colour - The hexadecimal colour to fill in the maze (colour of the paths)\n   */\n  constructor(game, graphics, size, colour = WHITE_0x) {\n    super(size);\n    this.size = size;\n    this.game = game;\n    this.graphics = graphics;\n    this.graphics.setPosition(1, 1); // The border for the maze is 1\n    this.gameDimensions = getDimensions(this.game);\n    this.sideLength = (this.gameDimensions.screenLength - 2) / size;\n    this.colour = colour;\n  }\n\n  /**\n   * Draws the maze\n   */\n  drawMaze() {\n    this.graphics.fillStyle(this.colour);\n    this.maze.getVertices().forEach(vertex => {\n      let pos = vertex.split(',');\n      // Vertex\n      let vertX = Number(pos[0]);\n      let vertY = Number(pos[1]);\n      // Grid unit\n      let rectX = vertX * this.sideLength + 1;\n      let rectY = vertY * this.sideLength + 1;\n      let lengthX = this.sideLength - 2;\n      let lengthY = this.sideLength - 2;\n      // Update the grid unit dimensions\n      if (this.maze.isEdge([vertex, `${vertX - 1},${vertY}`])) {\n        rectX -= 1;\n        lengthX += 1;\n      }\n      if (this.maze.isEdge([vertex, `${vertX + 1},${vertY}`])) {\n        lengthX += 1;\n      }\n      if (this.maze.isEdge([vertex, `${vertX},${vertY - 1}`])) {\n        rectY -= 1;\n        lengthY += 1;\n      }\n      if (this.maze.isEdge([vertex, `${vertX},${vertY + 1}`])) {\n        lengthY += 1;\n      }\n      // Draw the grid unit\n      this.graphics.fillRect(rectX, rectY, lengthX, lengthY);\n    });\n  }\n\n  /**\n   * Fill the grid with colour at the specified position\n   * @param {Object} position\n   * @param {Number} position.x - The x coordinate of the vertex to fill\n   * @param {Number} position.y - The y coordinate of the vertex to fill\n   * @param {Number} colour - Hexadecimal colour of the grid\n   */\n  fillGrid(position, colour) {\n    this.graphics.fillStyle(colour);\n    this.graphics.fillRect(\n      position.x * this.sideLength + 1,\n      position.y * this.sideLength + 1,\n      this.sideLength - 2,\n      this.sideLength - 2\n    );\n  }\n}\n","import Graph from './graph';\nimport { shuffle } from '../Common/shuffle';\n\nexport default class Maze {\n  constructor(size = 0) {\n    this.maze = this._createGrid(size);\n    this._createMaze(`${Math.floor(size / 2)},${Math.floor(size / 2)}`);\n  }\n\n  getVertices() {\n    return this.maze.getVertices();\n  }\n\n  isEdge(e) {\n    return this.maze.isEdge(e);\n  }\n\n  _createGrid(size) {\n    let grid = new Graph();\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        grid.addVertex(`${i},${j}`);\n      }\n    }\n    return grid;\n  }\n\n  _createMaze(vertex, completed = null, vertices = null) {\n    if (vertices == null) {\n      vertices = this.getVertices();\n    }\n    if (completed == null) {\n      completed = new Set(vertex);\n    }\n\n    let paths = shuffle(['up', 'down', 'left', 'right']);\n\n    let coords = vertex.split(',').map(position => {\n      return parseInt(position);\n    });\n\n    let up = `${coords[0]},${coords[1] - 1}`;\n    let down = `${coords[0]},${coords[1] + 1}`;\n    let left = `${coords[0] - 1},${coords[1]}`;\n    let right = `${coords[0] + 1},${coords[1]}`;\n\n    paths.forEach(direction => {\n      if (direction === 'up') {\n        if (vertices.has(up) && !completed.has(up)) {\n          this.maze.addEdge([vertex, up]);\n          this.maze.addEdge([up, vertex]);\n          completed.add(up);\n          this._createMaze(up, completed, vertices);\n        }\n      } else if (direction === 'down') {\n        if (vertices.has(down) && !completed.has(down)) {\n          this.maze.addEdge([vertex, down]);\n          this.maze.addEdge([down, vertex]);\n          completed.add(down);\n          this._createMaze(down, completed, vertices);\n        }\n      } else if (direction === 'left') {\n        if (vertices.has(left) && !completed.has(left)) {\n          this.maze.addEdge([vertex, left]);\n          this.maze.addEdge([left, vertex]);\n          completed.add(left);\n          this._createMaze(left, completed, vertices);\n        }\n      } else if (direction === 'right') {\n        if (vertices.has(right) && !completed.has(right)) {\n          this.maze.addEdge([vertex, right]);\n          this.maze.addEdge([right, vertex]);\n          completed.add(right);\n          this._createMaze(right, completed, vertices);\n        }\n      }\n    });\n  }\n}\n","import { GOLD_0x } from '../Common/colours';\n\n/**\n * @typedef {Object} Position - The x and y coordinates\n * @property {Number} x - The x coordinate\n * @property {Number} y - The y coordinate\n */\n\n/**\n * @typedef {Object} Direction\n * @property {Number} UP - Up\n * @property {Number} DOWN - Down\n * @property {Number} LEFT - Left\n * @property {Number} RIGHT - Right\n */\n\nconst DIRECTIONS = {\n  UP: 0,\n  DOWN: 1,\n  LEFT: 2,\n  RIGHT: 3\n};\n\n/**\n * The default number of intermediate steps (frames) between character movement\n */\nconst DEFAULT_UPDATE_STEPS = 5;\n\nexport default class Character {\n  /**\n   * Constructor\n   * @param {GameMaze} maze - An instance of the GameMaze object\n   * @param {Object} position - The initial position of the character\n   * @param {Number} position.x - The x coordinate of the character\n   * @param {Number} position.y - The y coordinate of the character\n   * @param {Object} [options]\n   * @param {String} [options.colour] - The hexadecimal colour of the character (defaults to gold)\n   * @param {Number} [options.updateSteps] - The number of intermediate steps (frames) between character movement (default: 5)\n   * @param {Boolean} [options.smoothMovement] - The flag to allow for smooth movement (default: false)\n   */\n  constructor(maze, position, options = {}) {\n    this.maze = maze;\n    this.position = position;\n    this.prevPos = position;\n    this.colour = options.colour || GOLD_0x;\n    this.smoothMovement = options.smoothMovement || false;\n    this.UPDATE_STEPS = options.updateSteps || DEFAULT_UPDATE_STEPS;\n    this.updating = false;\n    this.updateStep = 0;\n  }\n\n  static get DIRECTIONS() {\n    return DIRECTIONS;\n  }\n\n  /**\n   * Draw the character at its current position\n   */\n  drawCharacter() {\n    this.maze.fillGrid(this.position, this.colour);\n  }\n\n  /**\n   * Moves the character in the specified direction if possible\n   * @param {Direction} direction - The direction to move\n   */\n  moveCharacter(direction) {\n    // If the chracter is currently updating, ignore the move command\n    if (this.updating) {\n      return;\n    }\n    // Return the current character position\n    let prevPos = { ...this.position };\n    let newPos = { ...this.position };\n    if (direction === DIRECTIONS.UP) {\n      newPos.y -= 1;\n      if (newPos.y < 0) {\n        newPos.y = 0;\n      }\n    } else if (direction === DIRECTIONS.DOWN) {\n      newPos.y += 1;\n      if (newPos.y > this.maze.size - 1) {\n        newPos.y = this.maze.size - 1;\n      }\n    } else if (direction === DIRECTIONS.LEFT) {\n      newPos.x -= 1;\n      if (newPos.x < 0) {\n        newPos.x = 0;\n      }\n    } else if (direction === DIRECTIONS.RIGHT) {\n      newPos.x += 1;\n      if (newPos.x > this.maze.size - 1) {\n        newPos.x = this.maze.size - 1;\n      }\n    }\n    if (\n      this.maze.isEdge([`${prevPos.x},${prevPos.y}`, `${newPos.x},${newPos.y}`])\n    ) {\n      // Update the positions\n      this.position = newPos;\n      this.prevPos = prevPos;\n      if (this.smoothMovement) {\n        // Set the flag to update the player movement\n        this.updating = true;\n      } else {\n        this.maze.fillGrid(this.prevPos, this.maze.colour);\n        this.maze.fillGrid(this.position, this.colour);\n      }\n    }\n  }\n\n  /**\n   * This function should always be called in the Scene's update function\n   */\n  update() {\n    if (this.updating) {\n      this._smoothMovement(this.prevPos, this.position);\n    }\n  }\n\n  /**\n   * This function is called internally to draw the intermediate steps of the character movement\n   */\n  _smoothMovement() {\n    let diffX = Math.round(this.position.x - this.prevPos.x);\n    let diffY = Math.round(this.position.y - this.prevPos.y);\n    if (diffX !== 0) {\n      // Calculating the intermediate steps...\n      let interFrom = {\n        ...this.prevPos,\n        x:\n          Math.round(\n            (this.prevPos.x +\n              (1 / this.UPDATE_STEPS) * this.updateStep * diffX) *\n              10\n          ) / 10\n      };\n      let interTo = {\n        ...this.prevPos,\n        x:\n          Math.round(\n            (this.prevPos.x +\n              (1 / this.UPDATE_STEPS) * (this.updateStep + 1) * diffX) *\n              10\n          ) / 10\n      };\n      this.maze.fillGrid(interFrom, this.maze.colour);\n      this.maze.fillGrid(interTo, this.colour);\n    } else {\n      let interFrom = {\n        ...this.prevPos,\n        y:\n          Math.round(\n            (this.prevPos.y +\n              (1 / this.UPDATE_STEPS) * this.updateStep * diffY) *\n              10\n          ) / 10\n      };\n      let interTo = {\n        ...this.prevPos,\n        y:\n          Math.round(\n            (this.prevPos.y +\n              (1 / this.UPDATE_STEPS) * (this.updateStep + 1) * diffY) *\n              10\n          ) / 10\n      };\n      this.maze.fillGrid(interFrom, this.maze.colour);\n      this.maze.fillGrid(interTo, this.colour);\n    }\n\n    this.updateStep++;\n    if (this.updateStep % this.UPDATE_STEPS === 0) {\n      this.updateStep = 0;\n      this.updating = false;\n    }\n  }\n}\n","import Phaser from 'phaser';\nimport { BLACK_0x, GRAY_0x } from '../Common/colours';\nimport GameMaze from '../Game/gameMaze';\nimport Character from '../Game/character';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class StartGame extends Phaser.Scene {\n  constructor() {\n    super('StartGame');\n  }\n\n  init(data) {\n    this.settings = data;\n    this.directions = {\n      UP: 'up',\n      DOWN: 'down',\n      LEFT: 'left',\n      RIGHT: 'right'\n    };\n    this.handleGesture = this.handleGesture.bind(this);\n    this.actionClock = 0;\n    this.actionCooldown = 100; // Time in milliseconds\n  }\n\n  preload() {\n    // Load assets...\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(BLACK_0x);\n    this.keys = this.input.keyboard.addKeys({\n      up: 'W',\n      arrowUp: 'up',\n      down: 'S',\n      arrowDown: 'down',\n      left: 'A',\n      arrowLeft: 'left',\n      right: 'D',\n      arrowRight: 'right',\n      exit: 'Esc'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    // TODO: Change this scene to 'SOLO' game mode\n    // TODO: method to initialise different game modes -> or implement the different game modes as different scenes!\n    // TODO: side length is not needed -> just calculate from grid size and window length\n\n    this.graphics = this.add.graphics();\n\n    this.maze = new GameMaze(this.game, this.graphics, this.settings.gridSize);\n\n    let initialPosition = {\n      x: 0,\n      y: 0\n    };\n    this.character = new Character(this.maze, initialPosition, {\n      smoothMovement: true\n    });\n\n    this.endPoint = {\n      x: this.settings.gridSize - 1,\n      y: this.settings.gridSize - 1\n    };\n\n    this.maze.drawMaze();\n\n    // Draw the endpoint\n    this.maze.fillGrid(this.endPoint, GRAY_0x);\n\n    // Draw the player\n    this.character.drawCharacter();\n\n    this.timer = new Date().getTime();\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SWIPE_LEFT) {\n      this.updateMovement(Character.DIRECTIONS.LEFT);\n    } else if (gesture === GESTURES.SWIPE_RIGHT) {\n      this.updateMovement(Character.DIRECTIONS.RIGHT);\n    } else if (gesture === GESTURES.SWIPE_UP) {\n      this.updateMovement(Character.DIRECTIONS.UP);\n    } else if (gesture === GESTURES.SWIPE_DOWN) {\n      this.updateMovement(Character.DIRECTIONS.DOWN);\n    }\n  }\n\n  updateMovement(direction) {\n    // Move the character\n    this.character.moveCharacter(direction);\n    // Check if player is in the finish position, if yes, finish game\n    if (\n      this.character.position.x === this.endPoint.x &&\n      this.character.position.y === this.endPoint.y\n    ) {\n      this.scene.start('EndScreen', {\n        settings: this.settings,\n        results: {\n          gameMode: 0,\n          time: Math.floor((new Date().getTime() - this.timer) / 1000)\n        }\n      });\n    }\n  }\n\n  update() {\n    if (Phaser.Input.Keyboard.JustDown(this.keys.exit)) {\n      this.scene.start('MainMenu', this.settings);\n    }\n\n    if (new Date().getTime() - this.actionClock > this.actionCooldown) {\n      if (this.keys.up.isDown || this.keys.arrowUp.isDown) {\n        this.updateMovement(Character.DIRECTIONS.UP);\n        this.actionClock = new Date().getTime();\n      } else if (this.keys.down.isDown || this.keys.arrowDown.isDown) {\n        this.updateMovement(Character.DIRECTIONS.DOWN);\n        this.actionClock = new Date().getTime();\n      } else if (this.keys.left.isDown || this.keys.arrowLeft.isDown) {\n        this.updateMovement(Character.DIRECTIONS.LEFT);\n        this.actionClock = new Date().getTime();\n      } else if (this.keys.right.isDown || this.keys.arrowRight.isDown) {\n        this.updateMovement(Character.DIRECTIONS.RIGHT);\n        this.actionClock = new Date().getTime();\n      }\n    }\n\n    this.character.update();\n  }\n}\n","import Phaser from 'phaser';\nimport { getDimensions } from '../Game/gameSettings';\nimport { BLACK, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class EndScreen extends Phaser.Scene {\n  constructor() {\n    super('EndScreen');\n  }\n\n  init(data) {\n    this.settings = data.settings;\n    this.results = data.results;\n    this.gameModes = {\n      SOLO: 0,\n      TWO_PLAYER: 1,\n      RACE: 2,\n      CHASE: 3,\n      ESCAPE: 4\n    };\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      continue: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.drawScreen();\n  }\n\n  drawScreen() {\n    let gameOver = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Game Over',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize1\n      }\n    );\n    gameOver.setOrigin(0.5, 0.5);\n\n    if (this.results.gameMode === this.gameModes.SOLO) {\n      let time = this.add.text(\n        this.gameDimensions.screenCenter,\n        this.gameDimensions.screenSpaceUnit * 9,\n        `Time: ${this.results.time} s`,\n        {\n          fontFamily: 'Ubuntu',\n          fill: BLACK,\n          fontSize: this.gameDimensions.textSize2\n        }\n      );\n      time.setOrigin(0.5, 0.5);\n    } else if (this.results.gameMode === this.gameModes.TWO_PLAYER) {\n      // TODO...\n    }\n\n    let returnScreen = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 15,\n      'Press enter to exit to menu.',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize4\n      }\n    );\n    returnScreen.setOrigin(0.5, 0.5);\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SINGLE_TAP) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n\n  update() {\n    if (Phaser.Input.Keyboard.JustDown(this.keys.continue)) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n}\n","import React from 'react';\nimport Phaser from 'phaser';\nimport Movement from './Scenes/Movement';\nimport MainMenu from './Scenes/MainMenu';\nimport Settings from './Scenes/Settings';\nimport StartGame from './Scenes/StartGame';\nimport EndScreen from './Scenes/EndScreen';\n\nexport default class Game extends React.Component {\n  componentDidMount() {\n    const dimension = this._getDimensions();\n    const config = {\n      type: Phaser.AUTO,\n      parent: 'phaser-parent',\n      pixelArt: true,\n      width: dimension * 0.8,\n      height: dimension * 0.8,\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: { y: 200 }\n        }\n      },\n      scene: [MainMenu, Movement, Settings, StartGame, EndScreen]\n    };\n\n    new Phaser.Game(config);\n  }\n\n  /**\n   * Returns the smaller of window.innerWidth and window.innerHeight\n   */\n  _getDimensions() {\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    if (width < height) {\n      return width;\n    } else {\n      return height;\n    }\n  }\n\n  render() {\n    return <div id=\"phaser-parent\" />;\n  }\n}\n","import React, { Component } from 'react';\nimport Game from './Phaser/Game';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * https://stackoverflow.com/a/2450976\n */\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nmodule.exports = {\n  shuffle\n};\n"],"sourceRoot":""}