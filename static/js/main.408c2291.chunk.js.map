{"version":3,"sources":["Phaser/Game/gameSettings.js","Phaser/Game/gestures.js","Phaser/Scenes/MainMenu.js","Phaser/Scenes/Settings.js","Phaser/Utils/graph.js","Phaser/Game/gameMaze.js","Phaser/Utils/maze.js","Phaser/Game/character.js","Phaser/Scenes/GamemodeSolo.js","Phaser/Scenes/GamemodeTwoPlayer.js","Phaser/Scenes/GamemodeRace.js","Phaser/Scenes/GamemodeChase.js","Phaser/Scenes/GamemodeEscape.js","Phaser/Scenes/EndScreen.js","Phaser/Game.js","App.js","serviceWorker.js","index.js","Phaser/Common/colours.js","Phaser/Common/shuffle.js"],"names":["GAMEMODES","SOLO","id","scene","text","TWO_PLAYER","RACE","CHASE","ESCAPE","getGamemodeInfo","getDimensions","game","screenLength","config","width","screenSpaceUnit","screenCenter","textSize1","textSize2","textSize3","textSize4","GESTURES","SWIPE_RIGHT","SWIPE_LEFT","SWIPE_UP","SWIPE_DOWN","SINGLE_TAP","DOUBLE_TAP","TP_SWIPE_RIGHT","NONE_DETECTED","gestureDetection","inputManager","callback","options","arguments","length","undefined","on","pointer","swipeThreshold","deltaTime","upTime","downTime","velX","upX","downX","velY","upY","downY","speedX","Math","abs","speedY","detectGesture","MainMenu","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","data","settings","objectSpread","maxGridSize","minGridSize","gridSize","maxSideLength","minSideLength","sideLength","gameMode","handleGesture","bind","load","setBaseURL","cameras","main","setBackgroundColor","WHITE","keys","input","keyboard","addKeys","up","arrowUp","down","arrowDown","select","gameDimensions","choice","doubleTapTimer","doubleTapCooldown","add","fontFamily","fill","BLACK","fontSize","setOrigin","startGame","GOLD","GRAY","gesture","updateChoice","Date","getTime","start","Phaser","Input","Keyboard","JustDown","direction","newChoice","setFill","Scene","Settings","left","arrowLeft","right","arrowRight","concat","menuReturn","updateSelection","updateGridSize","updateGameMode","newGridSize","setText","newSideLength","newGameMode","Graph","_this","vertices","Set","edges","alist","forEach","v","addVertex","e","addEdge","_this2","key","vertex","Number","isInteger","push","isVertex","Error","has","Array","from","g","walk","i","isEdge","path","size","isWalk","GameMaze","graphics","colour","WHITE_0x","setPosition","fillStyle","maze","getVertices","pos","split","vertX","vertY","rectX","rectY","lengthX","lengthY","fillRect","position","x","y","Maze","_createGrid","_createMaze","floor","grid","j","completed","paths","shuffle","coords","map","parseInt","DIRECTIONS","UP","DOWN","LEFT","RIGHT","DEFAULT_UPDATE_STEPS","Character","prevPos","GOLD_0x","smoothMovement","UPDATE_STEPS","updateSteps","updating","updateStep","fillGrid","newPos","_smoothMovement","diffX","round","diffY","interFrom","interTo","GamemodeSolo","directions","actionClock","actionCooldown","BLACK_0x","exit","character","endPoint","drawMaze","GRAY_0x","drawCharacter","timer","updateMovement","moveCharacter","results","time","isDown","update","GamemodeTwoPlayer","continue","drawScreen","GamemodeRace","GamemodeChase","GamemodeEscape","EndScreen","gameModes","Game","dimension","_getDimensions","type","AUTO","parent","pixelArt","height","physics","default","arcade","gravity","window","innerWidth","innerHeight","react_default","a","createElement","React","Component","App","className","Game_Game","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","array","temporaryValue","randomIndex","currentIndex","random"],"mappings":"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","file":"static/js/main.408c2291.chunk.js","sourcesContent":["/**\n * @typedef {Object} GameSettings\n * @property {Number} maxGridSize\n * @property {Number} minGridSize\n * @property {Number} gridSize\n * @property {Number} maxSideLength\n * @property {Number} minSideLength\n * @property {Number} sideLength\n * @property {Number} gameMode\n */\n\n/**\n * @typedef {Object} GamemodeInfo\n * @property {Number} id - Gamemode ID\n * @property {String} scene - Gamemode scene\n * @property {String} text - Gamemode display text\n */\n\n/**\n * @typedef {Object} Gamemode\n * @property {Object} SOLO - Solo\n * @property {Number} SOLO.id\n * @property {String} SOLO.scene\n * @property {String} SOLO.text\n * @property {Number} TWO_PLAYER - Two Player\n * @property {Number} TWO_PLAYER.id\n * @property {String} TWO_PLAYER.scene\n * @property {String} TWO_PLAYER.text\n * @property {Number} RACE - Race\n * @property {Number} RACE.id\n * @property {String} RACE.scene\n * @property {String} RACE.text\n * @property {Number} CHASE - Chase\n * @property {Number} CHASE.id\n * @property {String} CHASE.scene\n * @property {String} CHASE.text\n * @property {Number} ESCAPE - Escape\n * @property {Number} ESCAPE.id\n * @property {String} ESCAPE.scene\n * @property {String} ESCAPE.text\n */\nexport const GAMEMODES = {\n  SOLO: {\n    id: 0,\n    scene: 'GamemodeSolo',\n    text: 'Solo'\n  },\n  TWO_PLAYER: {\n    id: 1,\n    scene: 'GamemodeTwoPlayer',\n    text: 'Two Player'\n  },\n  RACE: {\n    id: 2,\n    scene: 'GamemodeRace',\n    text: 'Race'\n  },\n  CHASE: {\n    id: 3,\n    scene: 'GamemodeChase',\n    text: 'Chase'\n  },\n  ESCAPE: {\n    id: 4,\n    scene: 'GamemodeEscape',\n    text: 'Escape'\n  }\n};\n\n/**\n *\n * @param {Number} id - The gamemode ID\n * @returns {GamemodeInfo}\n */\nexport function getGamemodeInfo(id) {\n  if (id === 0) {\n    return GAMEMODES.SOLO;\n  } else if (id === 1) {\n    return GAMEMODES.TWO_PLAYER;\n  } else if (id === 2) {\n    return GAMEMODES.RACE;\n  } else if (id === 3) {\n    return GAMEMODES.CHASE;\n  } else if (id === 4) {\n    return GAMEMODES.ESCAPE;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Returns custom dimensions for the game instance\n * @param {Phaser.Game} game - The Phaser Game object\n * @returns {Object} - The custom dimensions object\n */\nexport function getDimensions(game) {\n  const screenLength = game.config.width;\n  return {\n    screenLength,\n    screenSpaceUnit: screenLength / 20,\n    screenCenter: screenLength / 2,\n    textSize1: screenLength / 10,\n    textSize2: screenLength / 15,\n    textSize3: screenLength / 18,\n    textSize4: screenLength / 22\n  };\n}\n\n/**\n * The initial settings for the game (game configs)\n * @returns {GameSettings} - The initial/default settings for the game configurations\n */\nexport function initSettings() {\n  return {\n    maxGridSize: 35,\n    minGridSize: 10,\n    gridSize: 20,\n    maxSideLength: 15,\n    minSideLength: 10,\n    sideLength: 10,\n    gameMode: GAMEMODES.SOLO.id\n  };\n}\n","/**\n * @typedef {Object} Gesture\n * @property {Number} SWIPE_RIGHT\n * @property {Number} SWIPE_LEFT\n * @property {Number} SWIPE_UP\n * @property {Number} SWIPE_DOWN\n * @property {Number} SINGLE_TAP\n * @property {Number} NONE_DETECTED\n */\nexport const GESTURES = {\n  SWIPE_RIGHT: 0,\n  SWIPE_LEFT: 1,\n  SWIPE_UP: 2,\n  SWIPE_DOWN: 3,\n  SINGLE_TAP: 4,\n  DOUBLE_TAP: 5, // Not sure if this can be implemented here (maybe separately)\n  TP_SWIPE_RIGHT: 6, // TP = Two Pointer... (WIP)\n  NONE_DETECTED: 7\n};\n\n/**\n * Register input manager for gesture detection\n * @param {Phaser.Input.InputPlugin} inputManager - The input manager that handles all input related events\n * @callback callback - The callback function that handles the detected gesture\n *  @param {Gesture} gesture - The detected gesture\n * @param {Object} options\n * @param {Number} options.swipeThreshold - The swipe threshold for the detection\n */\nexport function gestureDetection(inputManager, callback, options = {}) {\n  inputManager.on('pointerup', pointer => {\n    callback(detectGesture(pointer, options));\n  });\n}\n\nfunction detectGesture(pointer, options) {\n  let swipeThreshold = options.swipeThreshold || 100;\n  let deltaTime = (pointer.upTime - pointer.downTime) / 1000;\n  let velX = (pointer.upX - pointer.downX) / deltaTime;\n  let velY = (pointer.upY - pointer.downY) / deltaTime;\n  let speedX = Math.abs(velX);\n  let speedY = Math.abs(velY);\n  if (speedX > speedY && speedX > swipeThreshold) {\n    if (velX < 0) {\n      return GESTURES.SWIPE_LEFT;\n    } else {\n      return GESTURES.SWIPE_RIGHT;\n    }\n  } else if (speedY > speedX && speedY > swipeThreshold) {\n    if (velY < 0) {\n      return GESTURES.SWIPE_UP;\n    } else {\n      return GESTURES.SWIPE_DOWN;\n    }\n  }\n  return GESTURES.SINGLE_TAP;\n}\n\n// Swipe gestures without using time (speed/velocity)\n// eslint-disable-next-line\nfunction detectGestureNoTime(pointer, options) {\n  let swipeThreshold = options.swipeThreshold || 50;\n  let displacementX = pointer.upX - pointer.downX;\n  let displacementY = pointer.upY - pointer.downY;\n  let distanceX = Math.abs(displacementX);\n  let distanceY = Math.abs(displacementY);\n  if (distanceX > distanceY && distanceX > swipeThreshold) {\n    if (displacementX < 0) {\n      return GESTURES.SWIPE_LEFT;\n    } else {\n      return GESTURES.SWIPE_RIGHT;\n    }\n  } else if (distanceY > distanceX && distanceY > swipeThreshold) {\n    if (displacementY < 0) {\n      return GESTURES.SWIPE_UP;\n    } else {\n      return GESTURES.SWIPE_DOWN;\n    }\n  }\n  return GESTURES.SINGLE_TAP;\n}\n","import Phaser from 'phaser';\nimport {\n  initSettings,\n  getDimensions,\n  getGamemodeInfo\n} from '../Game/gameSettings';\nimport { BLACK, GOLD, GRAY, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class MainMenu extends Phaser.Scene {\n  constructor() {\n    super('MainMenu');\n  }\n\n  init(data) {\n    this.settings = { ...initSettings(), ...data };\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  preload() {\n    this.load.setBaseURL(\n      'https://raw.githubusercontent.com/wjxhenry/website/master'\n    );\n    // Load assets...\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      up: 'W',\n      arrowUp: 'up',\n      down: 'S',\n      arrowDown: 'down',\n      select: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.choice = 0;\n\n    this.doubleTapTimer = 0;\n    this.doubleTapCooldown = 200; // 200 milliseconds between each tap\n\n    let title = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Yet Another Maze',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize2\n      }\n    );\n    title.setOrigin(0.5, 0.5);\n    let startGame = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 8,\n      'Start Game',\n      {\n        fontFamily: 'Ubuntu',\n        fill: GOLD,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    startGame.setOrigin(0.5, 0.5);\n    let settings = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 12,\n      'Settings',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    settings.setOrigin(0.5, 0.5);\n    let exit = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 16,\n      'Exit',\n      {\n        fontFamily: 'Ubuntu',\n        fill: GRAY,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    exit.setOrigin(0.5, 0.5);\n\n    this.options = [\n      { text: startGame, scene: getGamemodeInfo(this.settings.gameMode).scene },\n      { text: settings, scene: 'Settings' }\n      // { text: exit, scene: 'Null' }\n    ];\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SWIPE_UP) {\n      this.updateChoice(-1);\n    } else if (gesture === GESTURES.SWIPE_DOWN) {\n      this.updateChoice(1);\n    } else if (gesture === GESTURES.SINGLE_TAP) {\n      if (new Date().getTime() - this.doubleTapTimer < this.doubleTapCooldown) {\n        this.scene.start(this.options[this.choice].scene, this.settings);\n      }\n      this.doubleTapTimer = new Date().getTime();\n    }\n  }\n\n  update() {\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.up) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowUp)\n    ) {\n      this.updateChoice(-1);\n    }\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.down) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowDown)\n    ) {\n      this.updateChoice(1);\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.keys.select)) {\n      this.scene.start(this.options[this.choice].scene, this.settings);\n    }\n  }\n\n  updateChoice(direction) {\n    let newChoice = this.choice + direction;\n    if (newChoice > -1 && newChoice < this.options.length) {\n      this.options[this.choice].text.setFill(BLACK);\n      this.options[newChoice].text.setFill(GOLD);\n      this.choice = newChoice;\n    }\n  }\n}\n","import Phaser from 'phaser';\nimport { getDimensions } from '../Game/gameSettings';\nimport { BLACK, GOLD, GRAY, WHITE } from '../Common/colours';\nimport { GAMEMODES, getGamemodeInfo } from '../Game/gameSettings';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class Settings extends Phaser.Scene {\n  constructor() {\n    super('Settings');\n  }\n\n  init(data) {\n    this.settings = data;\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  preload() {\n    this.load.setBaseURL(\n      'https://raw.githubusercontent.com/wjxhenry/website/master'\n    );\n    // Load assets...\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      up: 'W',\n      arrowUp: 'up',\n      down: 'S',\n      arrowDown: 'down',\n      left: 'A',\n      arrowLeft: 'left',\n      right: 'D',\n      arrowRight: 'right',\n      select: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.choice = 0;\n\n    this.doubleTapTimer = 0;\n    this.doubleTapCooldown = 200; // 200 milliseconds between each tap\n\n    let title = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Settings',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize1\n      }\n    );\n    title.setOrigin(0.5, 0.5);\n    let gridSize = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 8,\n      `Grid size: ${this.settings.gridSize}`,\n      {\n        fontFamily: 'Ubuntu',\n        fill: GOLD,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    gridSize.setOrigin(0.5, 0.5);\n    let sideLength = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 11,\n      `Side length: ${this.settings.sideLength}`,\n      {\n        fontFamily: 'Ubuntu',\n        fill: GRAY,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    sideLength.setOrigin(0.5, 0.5);\n    let gameMode = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 14,\n      getGamemodeInfo(this.settings.gameMode).text,\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    gameMode.setOrigin(0.5, 0.5);\n    let menuReturn = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 17,\n      'Return',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize3\n      }\n    );\n    menuReturn.setOrigin(0.5, 0.5);\n\n    this.options = [gridSize, gameMode, menuReturn];\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SWIPE_UP) {\n      this.updateChoice(-1);\n    } else if (gesture === GESTURES.SWIPE_DOWN) {\n      this.updateChoice(1);\n    } else if (gesture === GESTURES.SWIPE_RIGHT) {\n      this.updateSelection(1);\n    } else if (gesture === GESTURES.SWIPE_LEFT) {\n      this.updateSelection(-1);\n    } else if (gesture === GESTURES.SINGLE_TAP) {\n      if (new Date().getTime() - this.doubleTapTimer < this.doubleTapCooldown) {\n        if (this.choice === 2) {\n          this.scene.start('MainMenu', this.settings);\n        }\n      }\n      this.doubleTapTimer = new Date().getTime();\n    }\n  }\n\n  update() {\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.up) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowUp)\n    ) {\n      this.updateChoice(-1);\n    }\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.down) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowDown)\n    ) {\n      this.updateChoice(1);\n    }\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.right) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowRight)\n    ) {\n      this.updateSelection(1);\n    }\n    if (\n      Phaser.Input.Keyboard.JustDown(this.keys.left) ||\n      Phaser.Input.Keyboard.JustDown(this.keys.arrowLeft)\n    ) {\n      this.updateSelection(-1);\n    }\n    if (Phaser.Input.Keyboard.JustDown(this.keys.select)) {\n      if (this.choice === 2) {\n        this.scene.start('MainMenu', this.settings);\n      }\n    }\n  }\n\n  updateChoice(direction) {\n    let newChoice = this.choice + direction;\n    if (newChoice > -1 && newChoice < this.options.length) {\n      this.options[this.choice].setFill(BLACK);\n      this.options[newChoice].setFill(GOLD);\n      this.choice = newChoice;\n    }\n  }\n\n  updateSelection(direction) {\n    if (this.choice === 0) {\n      this.updateGridSize(direction);\n    } else if (this.choice === 1) {\n      this.updateGameMode(direction);\n    }\n    // else if (this.choice === 1) {\n    //   this.updateSideLength(direction);\n    // }\n  }\n\n  updateGridSize(direction) {\n    let newGridSize = this.settings.gridSize + direction;\n    if (\n      newGridSize > this.settings.minGridSize - 1 &&\n      newGridSize < this.settings.maxGridSize + 1\n    ) {\n      this.options[0].setText(`Grid size: ${newGridSize}`);\n      this.settings.gridSize = newGridSize;\n    }\n  }\n\n  updateSideLength(direction) {\n    let newSideLength = this.settings.sideLength + direction;\n    if (\n      newSideLength > this.settings.minSideLength - 1 &&\n      newSideLength < this.settings.maxSideLength + 1\n    ) {\n      this.options[1].setText(`Side length: ${newSideLength}`);\n      this.settings.sideLength = newSideLength;\n    }\n  }\n\n  updateGameMode(direction) {\n    let newGameMode = this.settings.gameMode + direction;\n    if (newGameMode > -1 && newGameMode < Object.keys(GAMEMODES).length) {\n      this.options[1].setText(getGamemodeInfo(newGameMode).text);\n      this.settings.gameMode = newGameMode;\n    }\n  }\n}\n","/**\n * Directed Graph Class\n *\n * This graph class is a container that holds a set\n * of vertices and a list of directed edges.\n * Edges are modelled as tuples (u,v) of vertices.\n *\n * Uses an adjacency list representation. Loops\n * and parallel copies of edges can be stored.\n */\n\nexport default class Graph {\n  constructor(vertices = new Set(), edges = []) {\n    this.alist = {};\n\n    vertices.forEach(v => {\n      this.addVertex(v);\n    });\n    edges.forEach(e => {\n      this.addEdge(e);\n    });\n  }\n\n  getVertices() {\n    return new Set(Object.keys(this.alist));\n  }\n\n  getEdges() {\n    let edges = [];\n    Object.keys(this.alist).forEach(key => {\n      this.alist[key].forEach(vertex => {\n        if (Number.isInteger(vertex)) {\n          edges.push([Number(key), vertex]);\n        } else {\n          edges.push([key, vertex]);\n        }\n      });\n    });\n    return edges;\n  }\n\n  addVertex(v) {\n    if (!(v in this.alist)) {\n      this.alist[v] = new Set();\n    }\n  }\n\n  addEdge(e) {\n    if (!this.isVertex(e[0]) || !this.isVertex(e[1])) {\n      throw new Error('An endpoint is not in graph');\n    }\n    this.alist[e[0]].add(e[1]);\n  }\n\n  isVertex(v) {\n    return v in this.alist;\n  }\n\n  isEdge(e) {\n    if (!(e[0] in this.alist)) {\n      return false;\n    }\n    return this.alist[e[0]].has(e[1]);\n  }\n\n  neighbours(v) {\n    if (!this.isVertex(v)) {\n      throw new Error('Vertex not in graph');\n    }\n    return Array.from(this.alist[v]);\n  }\n\n  static isWalk(g, walk) {\n    if (walk.length === 0)\n      // Should have at least one vertex\n      return false;\n\n    if (walk.length === 1) return g.isVertex(walk[0]);\n\n    for (let i = 0; i < walk.length - 1; i++) {\n      if (!g.isEdge([walk[i], walk[i + 1]])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static isPath(g, path) {\n    if (new Set(path).size < path.length) return false;\n\n    return this.isWalk(g, path);\n  }\n}\n","import Maze from '../Utils/maze';\nimport { getDimensions } from './gameSettings';\nimport { WHITE_0x } from '../Common/colours';\n\nexport default class GameMaze extends Maze {\n  /**\n   * Constructor\n   * @param {Phaser.Game} game - The Phaser game object\n   * @param {Phaser.GameObjects.Graphics} graphics - The Phaser graphics object\n   * @param {Number} size - The size of the maze (size x size grid)\n   * @param {Number} colour - The hexadecimal colour to fill in the maze (colour of the paths)\n   */\n  constructor(game, graphics, size, colour = WHITE_0x) {\n    super(size);\n    this.size = size;\n    this.game = game;\n    this.graphics = graphics;\n    this.graphics.setPosition(1, 1); // The border for the maze is 1\n    this.gameDimensions = getDimensions(this.game);\n    this.sideLength = (this.gameDimensions.screenLength - 2) / size;\n    this.colour = colour;\n  }\n\n  /**\n   * Draws the maze\n   */\n  drawMaze() {\n    this.graphics.fillStyle(this.colour);\n    this.maze.getVertices().forEach(vertex => {\n      let pos = vertex.split(',');\n      // Vertex\n      let vertX = Number(pos[0]);\n      let vertY = Number(pos[1]);\n      // Grid unit\n      let rectX = vertX * this.sideLength + 1;\n      let rectY = vertY * this.sideLength + 1;\n      let lengthX = this.sideLength - 2;\n      let lengthY = this.sideLength - 2;\n      // Update the grid unit dimensions\n      if (this.maze.isEdge([vertex, `${vertX - 1},${vertY}`])) {\n        rectX -= 1;\n        lengthX += 1;\n      }\n      if (this.maze.isEdge([vertex, `${vertX + 1},${vertY}`])) {\n        lengthX += 1;\n      }\n      if (this.maze.isEdge([vertex, `${vertX},${vertY - 1}`])) {\n        rectY -= 1;\n        lengthY += 1;\n      }\n      if (this.maze.isEdge([vertex, `${vertX},${vertY + 1}`])) {\n        lengthY += 1;\n      }\n      // Draw the grid unit\n      this.graphics.fillRect(rectX, rectY, lengthX, lengthY);\n    });\n  }\n\n  /**\n   * Fill the grid with colour at the specified position\n   * @param {Object} position\n   * @param {Number} position.x - The x coordinate of the vertex to fill\n   * @param {Number} position.y - The y coordinate of the vertex to fill\n   * @param {Number} colour - Hexadecimal colour of the grid\n   */\n  fillGrid(position, colour) {\n    this.graphics.fillStyle(colour);\n    this.graphics.fillRect(\n      position.x * this.sideLength + 1,\n      position.y * this.sideLength + 1,\n      this.sideLength - 2,\n      this.sideLength - 2\n    );\n  }\n}\n","import Graph from './graph';\nimport { shuffle } from '../Common/shuffle';\n\nexport default class Maze {\n  constructor(size = 0) {\n    this.maze = this._createGrid(size);\n    this._createMaze(`${Math.floor(size / 2)},${Math.floor(size / 2)}`);\n  }\n\n  getVertices() {\n    return this.maze.getVertices();\n  }\n\n  isEdge(e) {\n    return this.maze.isEdge(e);\n  }\n\n  _createGrid(size) {\n    let grid = new Graph();\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        grid.addVertex(`${i},${j}`);\n      }\n    }\n    return grid;\n  }\n\n  _createMaze(vertex, completed = null, vertices = null) {\n    if (vertices == null) {\n      vertices = this.getVertices();\n    }\n    if (completed == null) {\n      completed = new Set(vertex);\n    }\n\n    let paths = shuffle(['up', 'down', 'left', 'right']);\n\n    let coords = vertex.split(',').map(position => {\n      return parseInt(position);\n    });\n\n    let up = `${coords[0]},${coords[1] - 1}`;\n    let down = `${coords[0]},${coords[1] + 1}`;\n    let left = `${coords[0] - 1},${coords[1]}`;\n    let right = `${coords[0] + 1},${coords[1]}`;\n\n    paths.forEach(direction => {\n      if (direction === 'up') {\n        if (vertices.has(up) && !completed.has(up)) {\n          this.maze.addEdge([vertex, up]);\n          this.maze.addEdge([up, vertex]);\n          completed.add(up);\n          this._createMaze(up, completed, vertices);\n        }\n      } else if (direction === 'down') {\n        if (vertices.has(down) && !completed.has(down)) {\n          this.maze.addEdge([vertex, down]);\n          this.maze.addEdge([down, vertex]);\n          completed.add(down);\n          this._createMaze(down, completed, vertices);\n        }\n      } else if (direction === 'left') {\n        if (vertices.has(left) && !completed.has(left)) {\n          this.maze.addEdge([vertex, left]);\n          this.maze.addEdge([left, vertex]);\n          completed.add(left);\n          this._createMaze(left, completed, vertices);\n        }\n      } else if (direction === 'right') {\n        if (vertices.has(right) && !completed.has(right)) {\n          this.maze.addEdge([vertex, right]);\n          this.maze.addEdge([right, vertex]);\n          completed.add(right);\n          this._createMaze(right, completed, vertices);\n        }\n      }\n    });\n  }\n}\n","import { GOLD_0x } from '../Common/colours';\n\n/**\n * @typedef {Object} Position - The x and y coordinates\n * @property {Number} x - The x coordinate\n * @property {Number} y - The y coordinate\n */\n\n/**\n * @typedef {Object} Direction\n * @property {Number} UP - Up\n * @property {Number} DOWN - Down\n * @property {Number} LEFT - Left\n * @property {Number} RIGHT - Right\n */\n\nconst DIRECTIONS = {\n  UP: 0,\n  DOWN: 1,\n  LEFT: 2,\n  RIGHT: 3\n};\n\n/**\n * The default number of intermediate steps (frames) between character movement\n */\nconst DEFAULT_UPDATE_STEPS = 5;\n\nexport default class Character {\n  /**\n   * Constructor\n   * @param {GameMaze} maze - An instance of the GameMaze object\n   * @param {Object} position - The initial position of the character\n   * @param {Number} position.x - The x coordinate of the character\n   * @param {Number} position.y - The y coordinate of the character\n   * @param {Object} [options]\n   * @param {String} [options.colour] - The hexadecimal colour of the character (defaults to gold)\n   * @param {Number} [options.updateSteps] - The number of intermediate steps (frames) between character movement (default: 5)\n   * @param {Boolean} [options.smoothMovement] - The flag to allow for smooth movement (default: false)\n   */\n  constructor(maze, position, options = {}) {\n    this.maze = maze;\n    this.position = position;\n    this.prevPos = position;\n    this.colour = options.colour || GOLD_0x;\n    this.smoothMovement = options.smoothMovement || false;\n    this.UPDATE_STEPS = options.updateSteps || DEFAULT_UPDATE_STEPS;\n    this.updating = false;\n    this.updateStep = 0;\n  }\n\n  static get DIRECTIONS() {\n    return DIRECTIONS;\n  }\n\n  /**\n   * Draw the character at its current position\n   */\n  drawCharacter() {\n    this.maze.fillGrid(this.position, this.colour);\n  }\n\n  /**\n   * Moves the character in the specified direction if possible\n   * @param {Direction} direction - The direction to move\n   */\n  moveCharacter(direction) {\n    // If the chracter is currently updating, ignore the move command\n    if (this.updating) {\n      return;\n    }\n    // Return the current character position\n    let prevPos = { ...this.position };\n    let newPos = { ...this.position };\n    if (direction === DIRECTIONS.UP) {\n      newPos.y -= 1;\n      if (newPos.y < 0) {\n        newPos.y = 0;\n      }\n    } else if (direction === DIRECTIONS.DOWN) {\n      newPos.y += 1;\n      if (newPos.y > this.maze.size - 1) {\n        newPos.y = this.maze.size - 1;\n      }\n    } else if (direction === DIRECTIONS.LEFT) {\n      newPos.x -= 1;\n      if (newPos.x < 0) {\n        newPos.x = 0;\n      }\n    } else if (direction === DIRECTIONS.RIGHT) {\n      newPos.x += 1;\n      if (newPos.x > this.maze.size - 1) {\n        newPos.x = this.maze.size - 1;\n      }\n    }\n    if (\n      this.maze.isEdge([`${prevPos.x},${prevPos.y}`, `${newPos.x},${newPos.y}`])\n    ) {\n      // Update the positions\n      this.position = newPos;\n      this.prevPos = prevPos;\n      if (this.smoothMovement) {\n        // Set the flag to update the player movement\n        this.updating = true;\n      } else {\n        this.maze.fillGrid(this.prevPos, this.maze.colour);\n        this.maze.fillGrid(this.position, this.colour);\n      }\n    }\n  }\n\n  /**\n   * This function should always be called in the Scene's update function\n   */\n  update() {\n    if (this.updating) {\n      this._smoothMovement(this.prevPos, this.position);\n    }\n  }\n\n  /**\n   * This function is called internally to draw the intermediate steps of the character movement\n   */\n  _smoothMovement() {\n    let diffX = Math.round(this.position.x - this.prevPos.x);\n    let diffY = Math.round(this.position.y - this.prevPos.y);\n    if (diffX !== 0) {\n      // Calculating the intermediate steps...\n      let interFrom = {\n        ...this.prevPos,\n        x:\n          Math.round(\n            (this.prevPos.x +\n              (1 / this.UPDATE_STEPS) * this.updateStep * diffX) *\n              10\n          ) / 10\n      };\n      let interTo = {\n        ...this.prevPos,\n        x:\n          Math.round(\n            (this.prevPos.x +\n              (1 / this.UPDATE_STEPS) * (this.updateStep + 1) * diffX) *\n              10\n          ) / 10\n      };\n      this.maze.fillGrid(interFrom, this.maze.colour);\n      this.maze.fillGrid(interTo, this.colour);\n    } else {\n      let interFrom = {\n        ...this.prevPos,\n        y:\n          Math.round(\n            (this.prevPos.y +\n              (1 / this.UPDATE_STEPS) * this.updateStep * diffY) *\n              10\n          ) / 10\n      };\n      let interTo = {\n        ...this.prevPos,\n        y:\n          Math.round(\n            (this.prevPos.y +\n              (1 / this.UPDATE_STEPS) * (this.updateStep + 1) * diffY) *\n              10\n          ) / 10\n      };\n      this.maze.fillGrid(interFrom, this.maze.colour);\n      this.maze.fillGrid(interTo, this.colour);\n    }\n\n    this.updateStep++;\n    if (this.updateStep % this.UPDATE_STEPS === 0) {\n      this.updateStep = 0;\n      this.updating = false;\n    }\n  }\n}\n","import Phaser from 'phaser';\nimport { BLACK_0x, GRAY_0x } from '../Common/colours';\nimport GameMaze from '../Game/gameMaze';\nimport Character from '../Game/character';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class GamemodeSolo extends Phaser.Scene {\n  constructor() {\n    super('GamemodeSolo');\n  }\n\n  init(data) {\n    this.settings = data;\n    this.directions = {\n      UP: 'up',\n      DOWN: 'down',\n      LEFT: 'left',\n      RIGHT: 'right'\n    };\n    this.handleGesture = this.handleGesture.bind(this);\n    this.actionClock = 0;\n    this.actionCooldown = 100; // Time in milliseconds\n  }\n\n  preload() {\n    // Load assets...\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(BLACK_0x);\n    this.keys = this.input.keyboard.addKeys({\n      up: 'W',\n      arrowUp: 'up',\n      down: 'S',\n      arrowDown: 'down',\n      left: 'A',\n      arrowLeft: 'left',\n      right: 'D',\n      arrowRight: 'right',\n      exit: 'Esc'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.graphics = this.add.graphics();\n\n    this.maze = new GameMaze(this.game, this.graphics, this.settings.gridSize);\n\n    let initialPosition = {\n      x: 0,\n      y: 0\n    };\n    this.character = new Character(this.maze, initialPosition, {\n      smoothMovement: true\n    });\n\n    this.endPoint = {\n      x: this.settings.gridSize - 1,\n      y: this.settings.gridSize - 1\n    };\n\n    this.maze.drawMaze();\n\n    // Draw the endpoint\n    this.maze.fillGrid(this.endPoint, GRAY_0x);\n\n    // Draw the player\n    this.character.drawCharacter();\n\n    this.timer = new Date().getTime();\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SWIPE_LEFT) {\n      this.updateMovement(Character.DIRECTIONS.LEFT);\n    } else if (gesture === GESTURES.SWIPE_RIGHT) {\n      this.updateMovement(Character.DIRECTIONS.RIGHT);\n    } else if (gesture === GESTURES.SWIPE_UP) {\n      this.updateMovement(Character.DIRECTIONS.UP);\n    } else if (gesture === GESTURES.SWIPE_DOWN) {\n      this.updateMovement(Character.DIRECTIONS.DOWN);\n    }\n  }\n\n  updateMovement(direction) {\n    // Move the character\n    this.character.moveCharacter(direction);\n    // Check if player is in the finish position, if yes, finish game\n    if (\n      this.character.position.x === this.endPoint.x &&\n      this.character.position.y === this.endPoint.y\n    ) {\n      this.scene.start('EndScreen', {\n        settings: this.settings,\n        results: {\n          gameMode: 0,\n          time: Math.floor((new Date().getTime() - this.timer) / 1000)\n        }\n      });\n    }\n  }\n\n  update() {\n    if (Phaser.Input.Keyboard.JustDown(this.keys.exit)) {\n      this.scene.start('MainMenu', this.settings);\n    }\n\n    if (new Date().getTime() - this.actionClock > this.actionCooldown) {\n      if (this.keys.up.isDown || this.keys.arrowUp.isDown) {\n        this.updateMovement(Character.DIRECTIONS.UP);\n        this.actionClock = new Date().getTime();\n      } else if (this.keys.down.isDown || this.keys.arrowDown.isDown) {\n        this.updateMovement(Character.DIRECTIONS.DOWN);\n        this.actionClock = new Date().getTime();\n      } else if (this.keys.left.isDown || this.keys.arrowLeft.isDown) {\n        this.updateMovement(Character.DIRECTIONS.LEFT);\n        this.actionClock = new Date().getTime();\n      } else if (this.keys.right.isDown || this.keys.arrowRight.isDown) {\n        this.updateMovement(Character.DIRECTIONS.RIGHT);\n        this.actionClock = new Date().getTime();\n      }\n    }\n\n    this.character.update();\n  }\n}\n","import Phaser from 'phaser';\nimport { getDimensions } from '../Game/gameSettings';\nimport { BLACK, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class GamemodeTwoPlayer extends Phaser.Scene {\n  constructor() {\n    super('GamemodeTwoPlayer');\n  }\n\n  init(data) {\n    this.settings = data.settings;\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      continue: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.drawScreen();\n  }\n\n  drawScreen() {\n    let toBeImplemented = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Two Player (WIP)',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize1\n      }\n    );\n    toBeImplemented.setOrigin(0.5, 0.5);\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SINGLE_TAP) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n\n  update() {\n    if (Phaser.Input.Keyboard.JustDown(this.keys.continue)) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n}\n","import Phaser from 'phaser';\nimport { getDimensions } from '../Game/gameSettings';\nimport { BLACK, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class GamemodeRace extends Phaser.Scene {\n  constructor() {\n    super('GamemodeRace');\n  }\n\n  init(data) {\n    this.settings = data.settings;\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      continue: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.drawScreen();\n  }\n\n  drawScreen() {\n    let toBeImplemented = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Race (WIP)',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize1\n      }\n    );\n    toBeImplemented.setOrigin(0.5, 0.5);\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SINGLE_TAP) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n\n  update() {\n    if (Phaser.Input.Keyboard.JustDown(this.keys.continue)) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n}\n","import Phaser from 'phaser';\nimport { getDimensions } from '../Game/gameSettings';\nimport { BLACK, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class GamemodeChase extends Phaser.Scene {\n  constructor() {\n    super('GamemodeChase');\n  }\n\n  init(data) {\n    this.settings = data.settings;\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      continue: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.drawScreen();\n  }\n\n  drawScreen() {\n    let toBeImplemented = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Chase (WIP)',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize1\n      }\n    );\n    toBeImplemented.setOrigin(0.5, 0.5);\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SINGLE_TAP) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n\n  update() {\n    if (Phaser.Input.Keyboard.JustDown(this.keys.continue)) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n}\n","import Phaser from 'phaser';\nimport { getDimensions } from '../Game/gameSettings';\nimport { BLACK, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class GamemodeEscape extends Phaser.Scene {\n  constructor() {\n    super('GamemodeEscape');\n  }\n\n  init(data) {\n    this.settings = data.settings;\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      continue: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.drawScreen();\n  }\n\n  drawScreen() {\n    let toBeImplemented = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Escape (WIP)',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize1\n      }\n    );\n    toBeImplemented.setOrigin(0.5, 0.5);\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SINGLE_TAP) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n\n  update() {\n    if (Phaser.Input.Keyboard.JustDown(this.keys.continue)) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n}\n","import Phaser from 'phaser';\nimport { getDimensions } from '../Game/gameSettings';\nimport { BLACK, WHITE } from '../Common/colours';\nimport { GESTURES, gestureDetection } from '../Game/gestures';\n\nexport default class EndScreen extends Phaser.Scene {\n  constructor() {\n    super('EndScreen');\n  }\n\n  init(data) {\n    this.settings = data.settings;\n    this.results = data.results;\n    this.gameModes = {\n      SOLO: 0,\n      TWO_PLAYER: 1,\n      RACE: 2,\n      CHASE: 3,\n      ESCAPE: 4\n    };\n    this.handleGesture = this.handleGesture.bind(this);\n  }\n\n  create() {\n    this.cameras.main.setBackgroundColor(WHITE);\n    this.keys = this.input.keyboard.addKeys({\n      continue: 'Enter'\n    });\n    gestureDetection(this.input, this.handleGesture);\n\n    this.gameDimensions = getDimensions(this.game);\n\n    this.drawScreen();\n  }\n\n  drawScreen() {\n    let gameOver = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 4,\n      'Game Over',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize1\n      }\n    );\n    gameOver.setOrigin(0.5, 0.5);\n\n    if (this.results.gameMode === this.gameModes.SOLO) {\n      let time = this.add.text(\n        this.gameDimensions.screenCenter,\n        this.gameDimensions.screenSpaceUnit * 9,\n        `Time: ${this.results.time} s`,\n        {\n          fontFamily: 'Ubuntu',\n          fill: BLACK,\n          fontSize: this.gameDimensions.textSize2\n        }\n      );\n      time.setOrigin(0.5, 0.5);\n    } else if (this.results.gameMode === this.gameModes.TWO_PLAYER) {\n      // TODO...\n    }\n\n    let returnScreen = this.add.text(\n      this.gameDimensions.screenCenter,\n      this.gameDimensions.screenSpaceUnit * 15,\n      'Press enter to exit to menu.',\n      {\n        fontFamily: 'Ubuntu',\n        fill: BLACK,\n        fontSize: this.gameDimensions.textSize4\n      }\n    );\n    returnScreen.setOrigin(0.5, 0.5);\n  }\n\n  handleGesture(gesture) {\n    if (gesture === GESTURES.SINGLE_TAP) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n\n  update() {\n    if (Phaser.Input.Keyboard.JustDown(this.keys.continue)) {\n      this.scene.start('MainMenu', this.settings);\n    }\n  }\n}\n","import React from 'react';\nimport Phaser from 'phaser';\nimport MainMenu from './Scenes/MainMenu';\nimport Settings from './Scenes/Settings';\nimport GamemodeSolo from './Scenes/GamemodeSolo';\nimport GamemodeTwoPlayer from './Scenes/GamemodeTwoPlayer';\nimport GamemodeRace from './Scenes/GamemodeRace';\nimport GamemodeChase from './Scenes/GamemodeChase';\nimport GamemodeEscape from './Scenes/GamemodeEscape';\nimport EndScreen from './Scenes/EndScreen';\n\nexport default class Game extends React.Component {\n  componentDidMount() {\n    const dimension = this._getDimensions();\n    const config = {\n      type: Phaser.AUTO,\n      parent: 'phaser-parent',\n      pixelArt: true,\n      width: dimension * 0.8,\n      height: dimension * 0.8,\n      physics: {\n        default: 'arcade',\n        arcade: {\n          gravity: { y: 200 }\n        }\n      },\n      scene: [\n        MainMenu,\n        Settings,\n        GamemodeSolo,\n        GamemodeTwoPlayer,\n        GamemodeRace,\n        GamemodeChase,\n        GamemodeEscape,\n        EndScreen\n      ]\n    };\n\n    new Phaser.Game(config);\n  }\n\n  /**\n   * Returns the smaller of window.innerWidth and window.innerHeight\n   */\n  _getDimensions() {\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n    if (width < height) {\n      return width;\n    } else {\n      return height;\n    }\n  }\n\n  render() {\n    return <div id=\"phaser-parent\" />;\n  }\n}\n","import React, { Component } from 'react';\nimport Game from './Phaser/Game';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const BLACK = '#000000';\nconst GOLD = '#f9a602';\nconst WHITE = '#ffffff';\nconst GRAY = '#cccccc';\n\n// '0x' notation - hexadecimal\nconst BLACK_0x = '0x000000';\nconst GOLD_0x = '0xf9a602';\nconst WHITE_0x = '0xffffff';\nconst GRAY_0x = '0xcccccc';\n\nmodule.exports = {\n  BLACK,\n  BLACK_0x,\n  GOLD,\n  GOLD_0x,\n  GRAY,\n  GRAY_0x,\n  WHITE,\n  WHITE_0x\n};\n","/**\n * https://stackoverflow.com/a/2450976\n */\nfunction shuffle(array) {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nmodule.exports = {\n  shuffle\n};\n"],"sourceRoot":""}